import requests
import wmi
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import IsolationForest
import pickle
import os

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –∏ chat ID
BOT_TOKEN = "7688031766:AAHdy2pFPEqXCYaV0LyvCL5FiKKHRr-sRNU"
CHAT_ID = "728491010"

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
MODEL_FILE = "isolation_forest_model.pkl"

def send_telegram_message(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram] {e}")

def train_anomaly_detector(event_messages):
    """–û–±—É—á–µ–Ω–∏–µ Isolation Forest –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(event_messages)

    model = IsolationForest(contamination=0.05, random_state=42)
    model.fit(X)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ TF-IDF –≤ —Ñ–∞–π–ª
    with open(MODEL_FILE, "wb") as f:
        pickle.dump((model, vectorizer), f)

    return model, vectorizer

def load_anomaly_detector():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
    if os.path.exists(MODEL_FILE):
        with open(MODEL_FILE, "rb") as f:
            return pickle.load(f)
    return None, None

def detect_anomaly(model, vectorizer, event_message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã–º"""
    X = vectorizer.transform([event_message])
    prediction = model.predict(X)  # -1 = –∞–Ω–æ–º–∞–ª–∏—è, 1 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    return prediction[0] == -1

def get_security_events():
    """–§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Windows"""
    c = wmi.WMI()
    watcher = c.Win32_NTLogEvent.watch_for(notification_type="Creation", Logfile="Security")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    model, vectorizer = load_anomaly_detector()
    event_messages = []

    if model is None:
        print("[!] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        while len(event_messages) < 200:
            event = watcher()
            event_messages.append(event.Message)
            print(f"[–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö] {len(event_messages)}/200")

        print("[+] –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∞–Ω–æ–º–∞–ª–∏–π...")
        model, vectorizer = train_anomaly_detector(event_messages)

    print("[+] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω...")

    while True:
        event = watcher()
        event_id = event.EventCode
        event_message = event.Message

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏—é
        if detect_anomaly(model, vectorizer, event_message):
            send_telegram_message(f"üö® –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!\nüîπ Event ID: {event_id}\nüîπ –û–ø–∏—Å–∞–Ω–∏–µ: {event_message}")
            print(f"[–ê–Ω–æ–º–∞–ª–∏—è] ID {event_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")

if __name__ == "__main__":
    get_security_events()
