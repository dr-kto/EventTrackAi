import wmi
import pythoncom
import pickle
import os
import telebot
import logging
from datetime import datetime
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import IsolationForest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
CONFIG_FILE = "config.txt"
config = {}
if os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, "r") as f:
        for line in f:
            key, value = line.strip().split("=", 1)
            config[key] = value

BOT_TOKEN = config.get("BOT_TOKEN", "")
CHAT_ID = config.get("CHAT_ID", "")

bot = telebot.TeleBot(BOT_TOKEN)
MODEL_FILE = "isolation_forest_model.pkl"
ANOMALY_LOG_FILE = "anomalies.log"
EVENT_COUNT = 100
FAILED_LOGINS = {}
MAX_FAILED_ATTEMPTS = 3

THREAT_CATEGORIES = {
    "Brute-force –∞—Ç–∞–∫–∞": [4625, 4771, 4776],
    "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ RDP": [4624, 4778, 4779],
    "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π": [4672, 4673, 4674],
    "–ó–∞–ø—É—Å–∫ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞": [4688, 7045],
    "–°–µ—Ç–µ–≤—ã–µ –∞—Ç–∞–∫–∏": [5156, 5157, 4754, 4755],
    "–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö": [4663, 4656]
}

# –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã—Ö —Ä–µ—à–µ–Ω–∏–π
def log_anomaly(event_id, event_message, event_time, action="None"):
    with open(ANOMALY_LOG_FILE, "a") as f:
        f.write(f"{event_time} - Event ID: {event_id} - {event_message} - Action: {action}\n")

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
def train_anomaly_detector(event_messages):
    logging.info("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(event_messages)
    model = IsolationForest(contamination=0.05, random_state=42)
    model.fit(X)
    with open(MODEL_FILE, "wb") as f:
        pickle.dump((model, vectorizer), f)
    logging.info("–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    return model, vectorizer

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
def load_anomaly_detector():
    if os.path.exists(MODEL_FILE):
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        with open(MODEL_FILE, "rb") as f:
            return pickle.load(f)
    return None, None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
def detect_anomaly(model, vectorizer, event_message):
    X = vectorizer.transform([event_message])
    return model.predict(X)[0] == -1

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
def format_time(timestamp):
    return datetime.strptime(timestamp.split('.')[0], "%Y%m%d%H%M%S").strftime("%Y-%m-%d %H:%M:%S")

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –ø—Ä–∏ 3 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö RDP
def block_ip(ip_address):
    os.system(f"netsh advfirewall firewall add rule name=\"Block {ip_address}\" dir=in action=block remoteip={ip_address}")
    logging.warning(f"IP {ip_address} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞.")
    return f"IP {ip_address} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
def send_telegram_message(event_id, event_message, event_time, is_anomaly, action="None"):
    category = next((cat for cat, ids in THREAT_CATEGORIES.items() if event_id in ids), "–î—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    event_time = format_time(event_time)
    
    if is_anomaly:
        log_anomaly(event_id, event_message, event_time, action)
        message = f"""üö® –ê–Ω–æ–º–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!\nüîπ –í—Ä–µ–º—è: {event_time}\nüîπ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüîπ Event ID: {event_id}\nüîπ –û–ø–∏—Å–∞–Ω–∏–µ: {event_message}\nüîπ –î–µ–π—Å—Ç–≤–∏–µ: {action}"""
        # logging.warning(f"–ê–Ω–æ–º–∞–ª–∏—è: {message}")
    else:
        message = f"""‚úÖ –û–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ\nüîπ –í—Ä–µ–º—è: {event_time}\nüîπ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüîπ Event ID: {event_id}"""
        # logging.info(f"–û–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {message}")
    
    bot.send_message(CHAT_ID, message)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def get_security_events():
    pythoncom.CoInitialize()
    c = wmi.WMI()
    watcher = c.Win32_NTLogEvent.watch_for(notification_type="Creation", Logfile="Security")
    model, vectorizer = load_anomaly_detector()
    event_messages = []
    
    if model is None:
        logging.info("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        while len(event_messages) < EVENT_COUNT:
            event = watcher()
            if event.EventCode in [id for ids in THREAT_CATEGORIES.values() for id in ids]:
                event_messages.append(event.Message)
                logging.info(f"{len(event_messages)}/{EVENT_COUNT} - ID: {event.EventCode} - {event.Message.splitlines()[0]}...")
        model, vectorizer = train_anomaly_detector(event_messages)
    
    logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω...")
    while True:
        event = watcher()
        event_id = event.EventCode
        event_message = event.Message
        event_time = event.TimeGenerated
        
        logging.info(f"–°–æ–±—ã—Ç–∏–µ: ID {event_id}, –≤—Ä–µ–º—è: {event_time}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {event_message.splitlines()[0]}...")
        action = "None"
        
        if event_id == 4625:  # –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
            ip_address = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            FAILED_LOGINS[ip_address] = FAILED_LOGINS.get(ip_address, 0) + 1
            if FAILED_LOGINS[ip_address] >= MAX_FAILED_ATTEMPTS:
                action = block_ip(ip_address)
                FAILED_LOGINS[ip_address] = 0
        
        if event_id in [id for ids in THREAT_CATEGORIES.values() for id in ids]:
            is_anomaly = detect_anomaly(model, vectorizer, event_message)
            send_telegram_message(event_id, event_message, event_time, is_anomaly, action)

logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
get_security_events()